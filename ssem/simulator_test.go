package ssem

import (
	"strconv"
	"testing"
)

func storeFromSnapshot(snp []string) Store {
	s := Store{}
	for i := range snp {
		w, _ := strconv.ParseInt(Reverse(snp[i]), 2, 33)
		s[i] = Word(w)
	}
	return s
}

func TestFunctionalAll(t *testing.T) {
	initial_store := storeFromSnapshot([]string{
		"10000000000000000000000000000000",
		"01010000000000100000000000000000",
		"00000000000000010000000000000000",
		"00001000000001100000000000000000",
		"00000000000000110000000000000000",
		"00000000000000000000000000000000",
		"00000000000001000000000000000000",
		"00000000000000000000000000000000",
		"00000000000001110000000000000000",
		"00000000000000000000000000000000",
		"00000111111111111111111111111111",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
	})

	expected_store := storeFromSnapshot([]string{
		"10000000000000000000000000000000",
		"01010000000000100000000000000000",
		"00000000000000010000000000000000",
		"00001000000001100000000000000000",
		"00000000000000110000000000000000",
		"00000000000000000000000000000000",
		"00000000000001000000000000000000",
		"00000000000000000000000000000000",
		"00000000000001110000000000000000",
		"00000000000000000000000000000000",
		"00000111111111111111111111111111",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"11111111111111111111111111111111",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
	})

	s := NewSsem()
	s.store = initial_store
	s.StopFlag = false
	s.Run(300)
	if s.store != expected_store {
		t.Errorf("failed Combined Functions Test")
	}
}

func TestFunctionalCmp1(t *testing.T) {
	initial_store := storeFromSnapshot([]string{
		"00000000000000000000000000000000",
		"11111000000000100000000000000000",
		"01111000000001100000000000000000",
		"01111000000000100000000000000000",
		"11001000000000010000000000000000",
		"11111000000001100000000000000000",
		"00000000000000110000000000000000",
		"11001000000001000000000000000000",
		"00000000000001110000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"10000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000100000000000000000000000000",
	})

	expected_store := storeFromSnapshot([]string{
		"00000000000000000000000000000000",
		"11111000000000100000000000000000",
		"01111000000001100000000000000000",
		"01111000000000100000000000000000",
		"11001000000000010000000000000000",
		"11111000000001100000000000000000",
		"00000000000000110000000000000000",
		"11001000000001000000000000000000",
		"00000000000001110000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"10000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"11111111111111111111111111111111",
	})

	s := NewSsem()
	s.store = initial_store
	s.StopFlag = false
	s.Run(300)
	if s.store != expected_store {
		t.Errorf("failed CMP1 Test")
	}
}

func TestFunctionalCmp2(t *testing.T) {
	initial_store := storeFromSnapshot([]string{
		"00000000000000000000000000000000",
		"11111000000000100000000000000000",
		"11001000000000010000000000000000",
		"01111000000001100000000000000000",
		"01111000000000100000000000000000",
		"11111000000001100000000000000000",
		"00000000000000110000000000000000",
		"00000000000001110000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"10000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000111111111111111111111111111",
	})

	expected_store := storeFromSnapshot([]string{
		"00000000000000000000000000000000",
		"11111000000000100000000000000000",
		"11001000000000010000000000000000",
		"01111000000001100000000000000000",
		"01111000000000100000000000000000",
		"11111000000001100000000000000000",
		"00000000000000110000000000000000",
		"00000000000001110000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"10000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
		"00000000000000000000000000000000",
	})

	s := NewSsem()
	s.store = initial_store
	s.StopFlag = false
	s.Run(300)
	if s.store != expected_store {
		t.Errorf("failed CMP2 Test")
	}
}

func TestFunctionalJmp1(t *testing.T) {
	initial_store := storeFromSnapshot([]string{
		"00000000000000000000000000000000",
		"10000000000000000000000000000000",
		"01000000000000000000000000000000",
		"11000000000000000000000000000000",
		"00100000000000000000000000000000",
		"10100000000000000000000000000000",
		"01100000000000000000000000000000",
		"11100000000000000000000000000000",
		"00010000000000000000000000000000",
		"10010000000000000000000000000000",
		"01010000000000000000000000000000",
		"11010000000000000000000000000000",
		"00110000000000000000000000000000",
		"10110000000000000000000000000000",
		"01110000000000000000000000000000",
		"11110000000000000000000000000000",
		"00001000000000000000000000000000",
		"10001000000000000000000000000000",
		"01001000000000000000000000000000",
		"11001000000000000000000000000000",
		"00101000000000000000000000000000",
		"10101000000000000000000000000000",
		"01101000000000000000000000000000",
		"11101000000000000000000000000000",
		"00011000000000000000000000000000",
		"10011000000000000000000000000000",
		"01011000000000000000000000000000",
		"11011000000000000000000000000000",
		"00111000000000000000000000000000",
		"10111000000000000000000000000000",
		"01111000000000000000000000000000",
		"11111000000000000000000000000000",
	})

	expected_store := storeFromSnapshot([]string{
		"00000000000000000000000000000000",
		"10000000000000000000000000000000",
		"01000000000000000000000000000000",
		"11000000000000000000000000000000",
		"00100000000000000000000000000000",
		"10100000000000000000000000000000",
		"01100000000000000000000000000000",
		"11100000000000000000000000000000",
		"00010000000000000000000000000000",
		"10010000000000000000000000000000",
		"01010000000000000000000000000000",
		"11010000000000000000000000000000",
		"00110000000000000000000000000000",
		"10110000000000000000000000000000",
		"01110000000000000000000000000000",
		"11110000000000000000000000000000",
		"00001000000000000000000000000000",
		"10001000000000000000000000000000",
		"01001000000000000000000000000000",
		"11001000000000000000000000000000",
		"00101000000000000000000000000000",
		"10101000000000000000000000000000",
		"01101000000000000000000000000000",
		"11101000000000000000000000000000",
		"00011000000000000000000000000000",
		"10011000000000000000000000000000",
		"01011000000000000000000000000000",
		"11011000000000000000000000000000",
		"00111000000000000000000000000000",
		"10111000000000000000000000000000",
		"01111000000000000000000000000000",
		"11111000000000000000000000000000",
	})

	s := NewSsem()
	s.store = initial_store
	s.StopFlag = false
	s.Run(31)
	if s.store != expected_store {
		t.Errorf("failed JMP1 Test")
	}
}

func TestFunctionalJrp1(t *testing.T) {
	// TODO: include behavioral testing at each step, not just the end state
	initial_store := storeFromSnapshot([]string{
		"00000000000000000000000000000000",
		"01111000000001000000000000000000",
		"11111000000001000000000000000000",
		"11111000000001000000000000000000",
		"11111000000001000000000000000000",
		"11111000000001000000000000000000",
		"11111000000001000000000000000000",
		"11111000000001000000000000000000",
		"11111000000001000000000000000000",
		"11111000000001000000000000000000",
		"11111000000001000000000000000000",
		"11111000000001000000000000000000",
		"11111000000001000000000000000000",
		"11111000000001000000000000000000",
		"11111000000001000000000000000000",
		"11111000000001000000000000000000",
		"11111000000001000000000000000000",
		"11111000000001000000000000000000",
		"11111000000001000000000000000000",
		"11111000000001000000000000000000",
		"11111000000001000000000000000000",
		"11111000000001000000000000000000",
		"11111000000001000000000000000000",
		"11111000000001000000000000000000",
		"11111000000001000000000000000000",
		"11111000000001000000000000000000",
		"11111000000001000000000000000000",
		"11111000000001000000000000000000",
		"11111000000001000000000000000000",
		"11111000000001000000000000000000",
		"11011000000000000000000000000000",
		"01111111111111111111111111111111",
	})

	expected_store := storeFromSnapshot([]string{
		"00000000000000000000000000000000",
		"01111000000001000000000000000000",
		"11111000000001000000000000000000",
		"11111000000001000000000000000000",
		"11111000000001000000000000000000",
		"11111000000001000000000000000000",
		"11111000000001000000000000000000",
		"11111000000001000000000000000000",
		"11111000000001000000000000000000",
		"11111000000001000000000000000000",
		"11111000000001000000000000000000",
		"11111000000001000000000000000000",
		"11111000000001000000000000000000",
		"11111000000001000000000000000000",
		"11111000000001000000000000000000",
		"11111000000001000000000000000000",
		"11111000000001000000000000000000",
		"11111000000001000000000000000000",
		"11111000000001000000000000000000",
		"11111000000001000000000000000000",
		"11111000000001000000000000000000",
		"11111000000001000000000000000000",
		"11111000000001000000000000000000",
		"11111000000001000000000000000000",
		"11111000000001000000000000000000",
		"11111000000001000000000000000000",
		"11111000000001000000000000000000",
		"11111000000001000000000000000000",
		"11111000000001000000000000000000",
		"11111000000001000000000000000000",
		"11011000000000000000000000000000",
		"01111111111111111111111111111111",
	})

	s := NewSsem()
	s.store = initial_store
	s.StopFlag = false
	s.Run(30)
	if s.store != expected_store {
		t.Errorf("failed JRP1 Test")
	}
}

func TestFunctionalLdn1(t *testing.T) {
	initial_store := storeFromSnapshot([]string{
		"00000000000000000000000000000000",
		"10000000000000100000000000000000",
		"01000000000000100000000000000000",
		"11000000000000100000000000000000",
		"00100000000000100000000000000000",
		"10100000000000100000000000000000",
		"01100000000000100000000000000000",
		"11100000000000100000000000000000",
		"00010000000000100000000000000000",
		"10010000000000100000000000000000",
		"01010000000000100000000000000000",
		"11010000000000100000000000000000",
		"00110000000000100000000000000000",
		"10110000000000100000000000000000",
		"01110000000000100000000000000000",
		"11110000000000100000000000000000",
		"00001000000000100000000000000000",
		"10001000000000100000000000000000",
		"01001000000000100000000000000000",
		"11001000000000100000000000000000",
		"00101000000000100000000000000000",
		"10101000000000100000000000000000",
		"01101000000000100000000000000000",
		"11101000000000100000000000000000",
		"00011000000000100000000000000000",
		"10011000000000100000000000000000",
		"01011000000000100000000000000000",
		"11011000000000100000000000000000",
		"00111000000000100000000000000000",
		"10111000000000100000000000000000",
		"01111000000000100000000000000000",
		"11111000000000100000000000000000",
	})

	expected_store := storeFromSnapshot([]string{
		"00000000000000000000000000000000",
		"10000000000000100000000000000000",
		"01000000000000100000000000000000",
		"11000000000000100000000000000000",
		"00100000000000100000000000000000",
		"10100000000000100000000000000000",
		"01100000000000100000000000000000",
		"11100000000000100000000000000000",
		"00010000000000100000000000000000",
		"10010000000000100000000000000000",
		"01010000000000100000000000000000",
		"11010000000000100000000000000000",
		"00110000000000100000000000000000",
		"10110000000000100000000000000000",
		"01110000000000100000000000000000",
		"11110000000000100000000000000000",
		"00001000000000100000000000000000",
		"10001000000000100000000000000000",
		"01001000000000100000000000000000",
		"11001000000000100000000000000000",
		"00101000000000100000000000000000",
		"10101000000000100000000000000000",
		"01101000000000100000000000000000",
		"11101000000000100000000000000000",
		"00011000000000100000000000000000",
		"10011000000000100000000000000000",
		"01011000000000100000000000000000",
		"11011000000000100000000000000000",
		"00111000000000100000000000000000",
		"10111000000000100000000000000000",
		"01111000000000100000000000000000",
		"11111000000000100000000000000000",
	})

	s := NewSsem()
	s.store = initial_store
	s.StopFlag = false
	s.Run(35)
	if s.store != expected_store {
		t.Errorf("failed LDN1 Test")
	}
}

func TestFunctionalSto1(t *testing.T) {
	initial_store := storeFromSnapshot([]string{
		"00000000000000000000000000000000",
		"11111000000000100000000000000000",
		"01000000000001100000000000000000",
		"11000000000001100000000000000000",
		"00100000000001100000000000000000",
		"10100000000001100000000000000000",
		"01100000000001100000000000000000",
		"11100000000001100000000000000000",
		"00010000000001100000000000000000",
		"10010000000001100000000000000000",
		"01010000000001100000000000000000",
		"11010000000001100000000000000000",
		"00110000000001100000000000000000",
		"10110000000001100000000000000000",
		"01110000000001100000000000000000",
		"11110000000001100000000000000000",
		"00001000000001100000000000000000",
		"10001000000001100000000000000000",
		"01001000000001100000000000000000",
		"11001000000001100000000000000000",
		"00101000000001100000000000000000",
		"10101000000001100000000000000000",
		"01101000000001100000000000000000",
		"11101000000001100000000000000000",
		"00011000000001100000000000000000",
		"10011000000001100000000000000000",
		"01011000000001100000000000000000",
		"11011000000001100000000000000000",
		"00111000000001100000000000000000",
		"10111000000001100000000000000000",
		"00000000000001110000000000000000",
		"11010101010101010101010101010101",
	})

	expected_store := storeFromSnapshot([]string{
		"00000000000000000000000000000000",
		"11111000000000100000000000000000",
		"10101010101010101010101010101010",
		"10101010101010101010101010101010",
		"10101010101010101010101010101010",
		"10101010101010101010101010101010",
		"10101010101010101010101010101010",
		"10101010101010101010101010101010",
		"10101010101010101010101010101010",
		"10101010101010101010101010101010",
		"10101010101010101010101010101010",
		"10101010101010101010101010101010",
		"10101010101010101010101010101010",
		"10101010101010101010101010101010",
		"10101010101010101010101010101010",
		"10101010101010101010101010101010",
		"10101010101010101010101010101010",
		"10101010101010101010101010101010",
		"10101010101010101010101010101010",
		"10101010101010101010101010101010",
		"10101010101010101010101010101010",
		"10101010101010101010101010101010",
		"10101010101010101010101010101010",
		"10101010101010101010101010101010",
		"10101010101010101010101010101010",
		"10101010101010101010101010101010",
		"10101010101010101010101010101010",
		"10101010101010101010101010101010",
		"10101010101010101010101010101010",
		"10101010101010101010101010101010",
		"00000000000001110000000000000000",
		"11010101010101010101010101010101",
	})

	s := NewSsem()
	s.store = initial_store
	s.StopFlag = false
	s.Run(29)
	if s.store != expected_store {
		t.Errorf("failed STO1 Test")
	}
}

func TestFunctionalSto2(t *testing.T) {
	initial_store := storeFromSnapshot([]string{
		"00000000000000000000000000000000",
		"11111000000000100000000000000000",
		"01000000000001100000000000000000",
		"11000000000001100000000000000000",
		"00100000000001100000000000000000",
		"10100000000001100000000000000000",
		"01100000000001100000000000000000",
		"11100000000001100000000000000000",
		"00010000000001100000000000000000",
		"10010000000001100000000000000000",
		"01010000000001100000000000000000",
		"11010000000001100000000000000000",
		"00110000000001100000000000000000",
		"10110000000001100000000000000000",
		"01110000000001100000000000000000",
		"11110000000001100000000000000000",
		"00001000000001100000000000000000",
		"10001000000001100000000000000000",
		"01001000000001100000000000000000",
		"11001000000001100000000000000000",
		"00101000000001100000000000000000",
		"10101000000001100000000000000000",
		"01101000000001100000000000000000",
		"11101000000001100000000000000000",
		"00011000000001100000000000000000",
		"10011000000001100000000000000000",
		"01011000000001100000000000000000",
		"11011000000001100000000000000000",
		"00111000000001100000000000000000",
		"10111000000001100000000000000000",
		"00000000000001110000000000000000",
		"01101010101010101010101010101010",
	})

	expected_store := storeFromSnapshot([]string{
		"00000000000000000000000000000000",
		"11111000000000100000000000000000",
		"01010101010101010101010101010101",
		"01010101010101010101010101010101",
		"01010101010101010101010101010101",
		"01010101010101010101010101010101",
		"01010101010101010101010101010101",
		"01010101010101010101010101010101",
		"01010101010101010101010101010101",
		"01010101010101010101010101010101",
		"01010101010101010101010101010101",
		"01010101010101010101010101010101",
		"01010101010101010101010101010101",
		"01010101010101010101010101010101",
		"01010101010101010101010101010101",
		"01010101010101010101010101010101",
		"01010101010101010101010101010101",
		"01010101010101010101010101010101",
		"01010101010101010101010101010101",
		"01010101010101010101010101010101",
		"01010101010101010101010101010101",
		"01010101010101010101010101010101",
		"01010101010101010101010101010101",
		"01010101010101010101010101010101",
		"01010101010101010101010101010101",
		"01010101010101010101010101010101",
		"01010101010101010101010101010101",
		"01010101010101010101010101010101",
		"01010101010101010101010101010101",
		"01010101010101010101010101010101",
		"00000000000001110000000000000000",
		"01101010101010101010101010101010",
	})

	s := NewSsem()
	s.store = initial_store
	s.StopFlag = false
	s.Run(29)
	if s.store != expected_store {
		t.Errorf("failed STO2 Test")
	}
}

func TestFunctionalSub1(t *testing.T) {
	initial_store := storeFromSnapshot([]string{})

	expected_store := storeFromSnapshot([]string{})

	s := NewSsem()
	s.store = initial_store
	s.StopFlag = false
	s.Run(300)
	if s.store != expected_store {
		t.Errorf("failed SUB1 Test")
	}
}

func TestFunctionalFactorct(t *testing.T) {
	// The first program was written by Tom Kilburn. It was a program to find the highest proper factor of any number a;
	// this was done by trying every integer b from a-1 downward until one was found that divided exactly into a.
	// The necessary divisions were done not by long division but by repeated subtraction of b
	// (because the "Baby" only had a hardware subtractor).
	//
	//    https://web.archive.org/web/20081006200609/http://www.computer50.org/mark1/firstprog.html
	//
	// When stopped, the answer will appear on line 27
	// With the number entered in the present file, it should be 131072
	initial_store := storeFromSnapshot([]string{
		"00000000000000000000000000000000", // 00 JMP 0    ;
		"00011000000000100000000000000000", // 01 LDN 24   ; -24 to C
		"01011000000001100000000000000000", // 02 STO 26   ; C to 26
		"01011000000000100000000000000000", // 03 LDN 26   ; -26 to C
		"11011000000001100000000000000000", // 04 STO 27   ; C to 27
		"11101000000000100000000000000000", // 05 LDN 23   ; -23 to C
		"11011000000000010000000000000000", // 06 SUB 27   ; Sub 27
		"00000000000000110000000000000000", // 07 CMP      ; Test
		"00101000000001000000000000000000", // 08 JRP 20   ; Add 20 to [...]
		"01011000000000010000000000000000", // 09 SUB 26   ; Sub 26
		"10011000000001100000000000000000", // 10 STO 25   ; C to 25
		"10011000000000100000000000000000", // 11 LDN 25   ; -25 to C
		"00000000000000110000000000000000", // 12 CMP      ; Test
		"00000000000001110000000000000000", // 13 STP      ; Stop
		"01011000000000100000000000000000", // 14 LDN 26   ; -26 to C
		"10101000000000010000000000000000", // 15 SUB 21   ; Sub 21
		"11011000000001100000000000000000", // 16 STO 27   ; C to 27
		"11011000000000100000000000000000", // 17 LDN 27   ; -27 to C
		"01011000000001100000000000000000", // 18 STO 26   ; C to 26
		"01101000000000000000000000000000", // 19 JMP 22   ; 22 to [...]
		"10111111111111111111111111111111", // 20 NUM -3   ;
		"10000000000000000000000000000000", // 21 NUM 1    ;
		"00100000000000000000000000000000", // 22 NUM 4    ;
		"00000000000000000011111111111111", // 23 NUM -262144  ; Opposit of the following number
		"11111111111111111100000000000000", // 24 NUM 262143   ; the number to find the highest factor of
		"00000000000000000000000000000000", // 25 NUM 0    ;
		"00000000000000000000000000000000", // 26 NUM 0    ;
		"00000000000000000000000000000000", // 27 NUM 0    ; This line will hold the answer when finished
		"00000000000000000000000000000000", // 28 NUM 0    ;
		"00000000000000000000000000000000", // 29 NUM 0    ;
		"00000000000000000000000000000000", // 30 NUM 0    ;
		"00000000000000000000000000000000", // 31 NUM 0    ;
	})

	s := NewSsem()
	s.store = initial_store
	s.StopFlag = false
	s.Run(100000000)
	if s.store[27] != 131072 {
		t.Errorf("failed TestFunctionalFactorct")
	}
}

func BenchmarkFactorct(b *testing.B) {
	// The first program was written by Tom Kilburn. It was a program to find the highest proper factor of any number a;
	// this was done by trying every integer b from a-1 downward until one was found that divided exactly into a.
	// The necessary divisions were done not by long division but by repeated subtraction of b
	// (because the "Baby" only had a hardware subtractor).
	//
	//    https://web.archive.org/web/20081006200609/http://www.computer50.org/mark1/firstprog.html
	//
	// When stopped, the answer will appear on line 27
	// With the number entered in the present file, it should be 131072
	initial_store := storeFromSnapshot([]string{
		"00000000000000000000000000000000", // 00 JMP 0    ;
		"00011000000000100000000000000000", // 01 LDN 24   ; -24 to C
		"01011000000001100000000000000000", // 02 STO 26   ; C to 26
		"01011000000000100000000000000000", // 03 LDN 26   ; -26 to C
		"11011000000001100000000000000000", // 04 STO 27   ; C to 27
		"11101000000000100000000000000000", // 05 LDN 23   ; -23 to C
		"11011000000000010000000000000000", // 06 SUB 27   ; Sub 27
		"00000000000000110000000000000000", // 07 CMP      ; Test
		"00101000000001000000000000000000", // 08 JRP 20   ; Add 20 to [...]
		"01011000000000010000000000000000", // 09 SUB 26   ; Sub 26
		"10011000000001100000000000000000", // 10 STO 25   ; C to 25
		"10011000000000100000000000000000", // 11 LDN 25   ; -25 to C
		"00000000000000110000000000000000", // 12 CMP      ; Test
		"00000000000001110000000000000000", // 13 STP      ; Stop
		"01011000000000100000000000000000", // 14 LDN 26   ; -26 to C
		"10101000000000010000000000000000", // 15 SUB 21   ; Sub 21
		"11011000000001100000000000000000", // 16 STO 27   ; C to 27
		"11011000000000100000000000000000", // 17 LDN 27   ; -27 to C
		"01011000000001100000000000000000", // 18 STO 26   ; C to 26
		"01101000000000000000000000000000", // 19 JMP 22   ; 22 to [...]
		"10111111111111111111111111111111", // 20 NUM -3   ;
		"10000000000000000000000000000000", // 21 NUM 1    ;
		"00100000000000000000000000000000", // 22 NUM 4    ;
		"00000000000000000011111111111111", // 23 NUM -262144  ; Opposit of the following number
		"11111111111111111100000000000000", // 24 NUM 262143   ; the number to find the highest factor of
		"00000000000000000000000000000000", // 25 NUM 0    ;
		"00000000000000000000000000000000", // 26 NUM 0    ;
		"00000000000000000000000000000000", // 27 NUM 0    ; This line will hold the answer when finished
		"00000000000000000000000000000000", // 28 NUM 0    ;
		"00000000000000000000000000000000", // 29 NUM 0    ;
		"00000000000000000000000000000000", // 30 NUM 0    ;
		"00000000000000000000000000000000", // 31 NUM 0    ;
	})

	s := NewSsem()
	s.store = initial_store
	s.StopFlag = false
	s.Run(100000000)
}

func BenchmarkNightmare(b *testing.B) {
	initial_store := storeFromSnapshot([]string{
		"00000110101001000100000100000100",
		"10011011111100100010000010001000",
		"10000010000101101000100001010000",
		"00000010000100110100001001100000",
		"11101011111100011010101010010100",
		"10000000110000010001000010101001",
		"10000001111000010000100100001100",
		"10000001111000010000011000000010",
		"10011000000001101000011001000001",
		"10101001111000100100100100000010",
		"00000001111000110011010010000100",
		"01101001111000010011000001001000",
		"11101001111000010100100000110000",
		"10101000110001101000010000110000",
		"10100001111000010000001001001000",
		"00010011111101100000000110000100",
		"00000111111110010000000010000010",
		"10000011111101101111111111111111",
		"10101001111000100110011001100110",
		"10101000110001101111111111111111",
		"00011000110000001111111111111111",
		"01100000000000000000000000000000",
		"11100000000000000000000000000000",
		"11111111111111111111111111111111",
		"00000000000000000000000000000000",
		"00000000000000011111000000100000",
		"00000000000000100000100001010000",
		"00000000000000100010100000100000",
		"00000001111110100000100000111000",
		"00000010000000011111000000100000",
		"00011110011110001000000000100000",
		"00111111111111111110000001010000",
	})

	s := NewSsem()
	s.store = initial_store
	s.StopFlag = false
	s.Run(100000000)
}
